"use client";
import { useEffect, useState } from "react";

export default function Dashboard() {
    const [matchData, setMatchData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const [formData, setFormData] = useState({
        team1: "",
        team2: "",
        logo1: "",
        logo2: "",
        players: Array(10).fill(""),
    });

    const handleChange = (e, index = null) => {
        if (index !== null) {
            const newPlayers = [...formData.players];
            newPlayers[index] = e.target.value;
            setFormData({ ...formData, players: newPlayers });
        } else {
            setFormData({ ...formData, [e.target.name]: e.target.value });
        }
    };

    // ‚úÖ Di chuy·ªÉn fetchMatchData ra ngo√†i useEffect
    const fetchMatchData = async () => {
        setLoading(true);
        try {
            const response = await fetch("/api/dashboard", { method: "GET" });
            if (!response.ok) throw new Error("L·ªói khi l·∫•y d·ªØ li·ªáu!");
            const data = await response.json();
            setMatchData(data.matchData);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch("/api/dashboard", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData),
            });
            const data = await response.json();
            if (!response.ok) throw new Error(data.message || "L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu");

            setMatchData(data.matchData); // ‚úÖ C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
            fetchMatchData(); // ‚úÖ G·ªçi l·∫°i GET ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi
        } catch (err) {
            setError(err.message);
        }
    };

    useEffect(() => {
        fetchMatchData(); // ‚úÖ G·ªçi API khi component ƒë∆∞·ª£c mount
    }, []);

    return (
        <div style={{ textAlign: "center", padding: "20px", display: "flex", gap: "20px" }}>
            <div style={{ flex: 1, padding: "20px", border: "1px solid gray", borderRadius: "10px", backgroundColor: "#f8f8f8" }}>
                <h2>Nh·∫≠p th√¥ng tin tr·∫≠n ƒë·∫•u</h2>
                <form onSubmit={handleSubmit}>
                    <input type="text" name="team1" placeholder="T√™n ƒë·ªôi 1" value={formData.team1} onChange={handleChange} required />
                    <input type="text" name="team2" placeholder="T√™n ƒë·ªôi 2" value={formData.team2} onChange={handleChange} required />
                    <input type="text" name="logo1" placeholder="URL Logo ƒë·ªôi 1" value={formData.logo1} onChange={handleChange} />
                    <input type="text" name="logo2" placeholder="URL Logo ƒë·ªôi 2" value={formData.logo2} onChange={handleChange} />

                    <h3>Nh·∫≠p danh s√°ch c·∫ßu th·ªß:</h3>
                    {formData.players.map((player, index) => (
                        <input key={index} type="text" placeholder={`C·∫ßu th·ªß ${index + 1}`} value={player} onChange={(e) => handleChange(e, index)} />
                    ))}

                    <button type="submit">L∆∞u tr·∫≠n ƒë·∫•u</button>
                </form>
            </div>

            <div style={{ flex: 1, padding: "20px", border: "1px solid gray", borderRadius: "10px", backgroundColor: "#f8f8f8" }}>
                <h2>Tr·∫≠n ƒë·∫•u</h2>
                {loading ? <p>ƒêang t·∫£i d·ªØ li·ªáu...</p> : error ? <p style={{ color: "red" }}>{error}</p> : matchData ? (
                    <div>
                        <h2>{matchData.team1.name} üÜö {matchData.team2.name}</h2>
                        <div>
                            <img src={matchData.team1.logo} alt="Logo ƒê·ªôi 1" width={100} />
                            <img src={matchData.team2.logo} alt="Logo ƒê·ªôi 2" width={100} />
                        </div>
                        <h3>ƒê·ªôi ƒê·ªè:</h3>
                        <ul>
                            {matchData.players.red.map((player, index) => (
                                <li key={index}>{player}</li>
                            ))}
                        </ul>
                        <h3>ƒê·ªôi Xanh:</h3>
                        <ul>
                            {matchData.players.blue.map((player, index) => (
                                <li key={index}>{player}</li>
                            ))}
                        </ul>
                    </div>
                ) : (
                    <p>Ch∆∞a c√≥ d·ªØ li·ªáu tr·∫≠n ƒë·∫•u.</p>
                )}
            </div>
        </div>
    );
}
